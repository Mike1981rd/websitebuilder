<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Hotel Admin</title>
    <link href="https://fonts.googleapis.com/css2?family=Public+Sans:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
    <link rel="stylesheet" href="~/css/materialize-exact.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/company-settings.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/roles.css" asp-append-version="true" />
</head>
<body>
    <div class="layout-container">
        <!-- Menu -->
        <aside class="layout-menu">
            <div class="app-brand">
                <a href="@Url.Action("Index", "Admin")" class="app-brand-link">
                    <span class="app-brand-logo">
                        <svg viewBox="0 0 32 32" width="32" height="32" class="logo-full">
                            <path d="M0 12 L16 0 L32 12 L28 12 L16 4 L4 12 Z" fill="#e91e63"/>
                            <path d="M0 20 L16 8 L32 20 L28 20 L16 12 L4 20 Z" fill="#e91e63"/>
                            <path d="M0 28 L16 16 L32 28 L28 28 L16 20 L4 28 Z" fill="#e91e63"/>
                        </svg>
                        <span class="logo-collapsed">M</span>
                    </span>
                    <span class="app-brand-text">Materialize</span>
                </a>
                <button id="menu-toggle-btn" class="btn-toggle">
                    <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <polyline points="15 18 9 12 15 6"></polyline>
                    </svg>
                </button>
            </div>

            <div class="menu-inner">
                <ul class="menu-inner-root" style="list-style: none; padding: 0;">
                    <li class="menu-item">
                        <a href="@Url.Action("Company", "Admin")" class="menu-link @(ViewContext.RouteData.Values["action"]?.ToString() == "Company" ? "active" : "")">
                            <i class="menu-icon fas fa-building"></i>
                            <span class="menu-text" data-i18n="menu.empresa">Empresa</span>
                            <span class="menu-tooltip" data-i18n="menu.empresa">Empresa</span>
                        </a>
                    </li>

                    <li class="menu-item">
                        <a href="@Url.Action("Index", "Roles")" class="menu-link @(ViewContext.RouteData.Values["controller"]?.ToString() == "Roles" ? "active" : "")">
                            <i class="menu-icon fas fa-user-shield"></i>
                            <span class="menu-text" data-i18n="menu.rolesUsers">Roles & Usuarios</span>
                            <span class="menu-tooltip" data-i18n="menu.rolesUsers">Roles & Usuarios</span>
                        </a>
                    </li>

                    <li class="menu-item">
                        <a href="#" class="menu-link">
                            <i class="menu-icon fas fa-user-friends"></i>
                            <span class="menu-text" data-i18n="menu.clientes">Clientes</span>
                            <span class="menu-tooltip" data-i18n="menu.clientes">Clientes</span>
                        </a>
                    </li>

                    <li class="menu-item">
                        <a href="@Url.Action("Index", "WebsiteBuilder")" class="menu-link @(ViewContext.RouteData.Values["controller"]?.ToString() == "WebsiteBuilder" ? "active" : "")">
                            <i class="menu-icon fas fa-globe"></i>
                            <span class="menu-text" data-i18n="menu.sitioWeb">Sitio Web</span>
                            <span class="menu-tooltip" data-i18n="menu.sitioWeb">Sitio Web</span>
                        </a>
                    </li>
                </ul>
            </div>
        </aside>

        <!-- Page Content -->
        <div class="layout-page">
            <!-- Navbar -->
            <nav class="layout-navbar">
                <div class="navbar-content">
                    <div class="search-wrapper">
                        <i class="search-icon fas fa-search"></i>
                        <input type="text" class="search-input" placeholder="Buscar (CTRL + K)" data-i18n-placeholder="search.placeholder" />
                    </div>
                    <div class="navbar-actions">
                        <div class="language-selector">
                            <button class="navbar-btn" id="language-toggle">
                                <i class="fas fa-globe"></i>
                            </button>
                            <div class="language-dropdown" id="language-dropdown">
                                <a href="#" class="language-option active" data-lang="es">
                                    <img src="https://flagcdn.com/w20/es.png" alt="ES"> Español
                                </a>
                                <a href="#" class="language-option" data-lang="en">
                                    <img src="https://flagcdn.com/w20/us.png" alt="EN"> English
                                </a>
                            </div>
                        </div>
                        <button class="navbar-btn" id="theme-toggle">
                            <i class="fas fa-moon"></i>
                        </button>
                        <button class="navbar-btn">
                            <i class="fas fa-star"></i>
                        </button>
                        <button class="navbar-btn">
                            <i class="fas fa-bell"></i>
                            <span class="notification-badge">3</span>
                        </button>
                        @{
                            var userImage = User.FindFirst("ProfileImagePath")?.Value;
                            var userName = User.FindFirst("FullName")?.Value ?? "User";
                            var userEmail = User.FindFirst(System.Security.Claims.ClaimTypes.Email)?.Value;
                        }
                        <!-- Nuevo Avatar con Dropdown -->
                        <div class="avatar-container">
                            <div class="avatar-trigger" id="avatarTrigger">
                                @if (!string.IsNullOrEmpty(userImage))
                                {
                                    <img src="@userImage" alt="@userName" class="avatar-img" />
                                }
                                else
                                {
                                    <img src="https://ui-avatars.com/api/?background=e91e63&color=fff&name=@Uri.EscapeDataString(userName)&size=128" alt="@userName" class="avatar-img" />
                                }
                            </div>
                            <div class="avatar-menu" id="avatarMenu">
                                <div class="avatar-menu-header">
                                    <div class="avatar-menu-name">@userName</div>
                                    <div class="avatar-menu-email">@userEmail</div>
                                </div>
                                <div class="avatar-menu-divider"></div>
                                <a href="@Url.Action("Company", "Admin")" class="avatar-menu-item">
                                    <i class="fas fa-building"></i>
                                    <span>Empresa</span>
                                </a>
                                <a href="#" class="avatar-menu-item">
                                    <i class="fas fa-user"></i>
                                    <span>Mi Perfil</span>
                                </a>
                                <a href="#" class="avatar-menu-item">
                                    <i class="fas fa-cog"></i>
                                    <span>Configuración</span>
                                </a>
                                <div class="avatar-menu-divider"></div>
                                <form asp-controller="Account" asp-action="Logout" method="post" class="avatar-menu-form">
                                    @Html.AntiForgeryToken()
                                    <button type="submit" class="avatar-menu-item avatar-menu-logout">
                                        <i class="fas fa-sign-out-alt"></i>
                                        <span>Cerrar Sesión</span>
                                    </button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </nav>

            <!-- Content -->
            <div class="content-wrapper">
                @RenderBody()
            </div>
        </div>
    </div>

    <!-- Customizer Button -->
    <button class="customizer-btn" id="template-customizer-btn">
        <i class="fas fa-cog"></i>
    </button>

    <!-- Color Picker Modal -->
    <div class="color-picker-modal" id="color-picker-modal">
        <div class="color-picker-header">
            <h5 class="color-picker-title" data-i18n="colorPicker.title">Seleccionar Color</h5>
            <button class="color-picker-close" id="color-picker-close">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="color-gradient" id="color-gradient">
            <div class="color-picker-indicator" id="color-picker-indicator"></div>
        </div>
        <div class="hue-slider" id="hue-slider">
            <div class="hue-indicator" id="hue-indicator"></div>
        </div>
        <div class="hex-input-wrapper">
            <label class="hex-label">HEX:</label>
            <input type="text" class="hex-input" id="hex-input" value="#e91e63" maxlength="7">
        </div>
        <div class="color-picker-actions">
            <button class="btn-cancel" id="color-picker-cancel" data-i18n="colorPicker.cancel">Cancelar</button>
            <button class="btn-apply" id="color-picker-apply" data-i18n="colorPicker.apply">Aplicar</button>
        </div>
    </div>

    <!-- Menu Color Picker Modal -->
    <div class="color-picker-modal" id="menu-color-picker-modal">
        <div class="color-picker-header">
            <h5 class="color-picker-title" data-i18n="colorPicker.menuTitle">Seleccionar Color de Fondo del Menú</h5>
            <button class="color-picker-close" id="menu-color-picker-close">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="color-gradient" id="menu-color-gradient">
            <div class="color-picker-indicator" id="menu-color-picker-indicator"></div>
        </div>
        <div class="hue-slider" id="menu-hue-slider">
            <div class="hue-indicator" id="menu-hue-indicator"></div>
        </div>
        <div class="hex-input-wrapper">
            <label class="hex-label">HEX:</label>
            <input type="text" class="hex-input" id="menu-hex-input" value="#2b2c40" maxlength="7">
        </div>
        <div class="color-picker-actions">
            <button class="btn-cancel" id="menu-color-picker-cancel" data-i18n="colorPicker.cancel">Cancelar</button>
            <button class="btn-apply" id="menu-color-picker-apply" data-i18n="colorPicker.apply">Aplicar</button>
        </div>
    </div>

    <!-- Template Customizer -->
    <div class="customizer-overlay" id="customizer-overlay"></div>
    <div class="template-customizer" id="template-customizer">
        <div class="customizer-header">
            <h5 class="customizer-title" data-i18n="customizer.title">Personalizador de Plantilla</h5>
            <button class="customizer-close" id="customizer-close">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="customizer-body">
            <!-- Theming Section -->
            <div class="customizer-section">
                <p class="customizer-section-title" data-i18n="customizer.theming">Tema</p>
                
                <p style="margin-bottom: 0.75rem; font-weight: 500; color: #444564;" data-i18n="customizer.primaryColor">Color Primario</p>
                <div class="color-options">
                    <div class="color-option primary" data-color="#5a5cdb"></div>
                    <div class="color-option success" data-color="#00bfa5"></div>
                    <div class="color-option warning" data-color="#ffa500"></div>
                    <div class="color-option danger active" data-color="#e91e63"></div>
                    <div class="color-option info" data-color="#00b8d4"></div>
                    <div class="color-option custom" id="custom-color-picker">
                        <i class="fas fa-palette"></i>
                    </div>
                </div>

                <p style="margin-bottom: 0.75rem; font-weight: 500; color: #444564;" data-i18n="customizer.theme">Tema</p>
                <div class="theme-options">
                    <div class="theme-option active" data-theme="light">
                        <div class="theme-icon">
                            <i class="fas fa-sun" style="color: #ffa500;"></i>
                        </div>
                        <div class="theme-name" data-i18n="customizer.light">Claro</div>
                    </div>
                    <div class="theme-option" data-theme="dark">
                        <div class="theme-icon">
                            <i class="fas fa-moon" style="color: #6b7280;"></i>
                        </div>
                        <div class="theme-name" data-i18n="customizer.dark">Oscuro</div>
                    </div>
                    <div class="theme-option" data-theme="system">
                        <div class="theme-icon">
                            <i class="fas fa-laptop" style="color: #5a5cdb;"></i>
                        </div>
                        <div class="theme-name" data-i18n="customizer.system">Sistema</div>
                    </div>
                </div>
            </div>

            <!-- Layout Section -->
            <div class="customizer-section">
                <p class="customizer-section-title" data-i18n="customizer.layout">Diseño</p>
                
                <div style="margin-bottom: 1rem;">
                    <div class="switch-option">
                        <span class="switch-label" data-i18n="customizer.semiDark">Semi Oscuro</span>
                        <label class="switch">
                            <input type="checkbox" id="semi-dark-toggle" checked>
                            <span class="slider"></span>
                        </label>
                    </div>
                </div>
            </div>

            <!-- Menu Section -->
            <div class="customizer-section">
                <p class="customizer-section-title" data-i18n="customizer.menu">Menú (Navegación)</p>
                
                <!-- Menu Layout Options -->
                <div class="menu-layout-options" style="margin-bottom: 1.5rem;">
                    <div class="layout-options">
                        <div class="layout-option menu-layout active" data-menu-layout="expanded">
                            <div class="layout-preview" style="background: #e0e0e0; position: relative;">
                                <div style="position: absolute; left: 0; top: 0; bottom: 0; width: 30%; background: #666;"></div>
                                <div style="position: absolute; right: 10px; top: 10px; bottom: 10px; left: 35%; background: #f0f0f0; border-radius: 4px;"></div>
                            </div>
                            <div class="layout-name" data-i18n="customizer.expanded">Expandido</div>
                        </div>
                        <div class="layout-option menu-layout" data-menu-layout="collapsed">
                            <div class="layout-preview" style="background: #e0e0e0; position: relative;">
                                <div style="position: absolute; left: 0; top: 0; bottom: 0; width: 15%; background: #666;"></div>
                                <div style="position: absolute; right: 10px; top: 10px; bottom: 10px; left: 20%; background: #f0f0f0; border-radius: 4px;"></div>
                            </div>
                            <div class="layout-name" data-i18n="customizer.collapsed">Colapsado</div>
                        </div>
                    </div>
                </div>

                <!-- Navbar Type Options -->
                <p style="margin-bottom: 0.75rem; font-weight: 500; color: #444564;" data-i18n="customizer.navbarType">Tipo de Barra de Navegación</p>
                <div class="navbar-type-options" style="margin-bottom: 1.5rem;">
                    <div class="layout-options" style="grid-template-columns: repeat(3, 1fr);">
                        <div class="layout-option navbar-type active" data-navbar-type="sticky">
                            <div class="layout-preview" style="background: #e0e0e0; position: relative; height: 50px;">
                                <div style="position: absolute; top: 0; left: 0; right: 0; height: 15px; background: #666; border-bottom: 2px solid #e91e63;"></div>
                            </div>
                            <div class="layout-name" data-i18n="customizer.sticky">Sticky</div>
                        </div>
                        <div class="layout-option navbar-type" data-navbar-type="static">
                            <div class="layout-preview" style="background: #e0e0e0; position: relative; height: 50px;">
                                <div style="position: absolute; top: 0; left: 0; right: 0; height: 15px; background: #666;"></div>
                            </div>
                            <div class="layout-name" data-i18n="customizer.static">Static</div>
                        </div>
                        <div class="layout-option navbar-type" data-navbar-type="hidden">
                            <div class="layout-preview" style="background: #e0e0e0; position: relative; height: 50px;">
                                <div style="position: absolute; top: 10px; left: 10px; right: 10px; bottom: 10px; background: #f0f0f0; border-radius: 4px;"></div>
                            </div>
                            <div class="layout-name" data-i18n="customizer.hidden">Hidden</div>
                        </div>
                    </div>
                </div>
                
                <p style="margin-bottom: 0.75rem; font-weight: 500; color: #444564;" data-i18n="customizer.menuBackground">Fondo del Menú</p>
                <div class="color-options">
                    <div class="color-option menu-bg" data-menu-bg="#2b2c40" style="background: #2b2c40;" title="Default Dark"></div>
                    <div class="color-option menu-bg" data-menu-bg="#1a1a2e" style="background: #1a1a2e;" title="Deep Dark"></div>
                    <div class="color-option menu-bg" data-menu-bg="#16213e" style="background: #16213e;" title="Navy Blue"></div>
                    <div class="color-option menu-bg" data-menu-bg="#0f3460" style="background: #0f3460;" title="Ocean Blue"></div>
                    <div class="color-option menu-bg" data-menu-bg="#3d3d3d" style="background: #3d3d3d;" title="Charcoal"></div>
                    <div class="color-option menu-bg custom" id="custom-menu-bg">
                        <i class="fas fa-palette"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Menu toggle
        document.querySelectorAll('.menu-toggle').forEach(item => {
            item.addEventListener('click', e => {
                e.preventDefault();
                const parent = item.parentElement;
                parent.classList.toggle('open');
            });
        });

        // Search shortcut
        document.addEventListener('keydown', e => {
            if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
                e.preventDefault();
                document.querySelector('.search-input')?.focus();
            }
        });

        // Template Customizer
        const customizerBtn = document.getElementById('template-customizer-btn');
        const customizer = document.getElementById('template-customizer');
        const customizerOverlay = document.getElementById('customizer-overlay');
        const customizerClose = document.getElementById('customizer-close');

        customizerBtn.addEventListener('click', () => {
            customizer.classList.add('show');
            customizerOverlay.classList.add('show');
        });

        customizerClose.addEventListener('click', () => {
            customizer.classList.remove('show');
            customizerOverlay.classList.remove('show');
        });

        customizerOverlay.addEventListener('click', () => {
            customizer.classList.remove('show');
            customizerOverlay.classList.remove('show');
        });

        // Color options
        document.querySelectorAll('.color-option').forEach(option => {
            option.addEventListener('click', () => {
                if (option.classList.contains('custom')) {
                    // Open custom color picker
                    document.getElementById('color-picker-modal').classList.add('show');
                    customizerOverlay.classList.add('show');
                    return;
                }
                document.querySelectorAll('.color-option').forEach(opt => opt.classList.remove('active'));
                option.classList.add('active');
                const color = option.getAttribute('data-color');
                document.documentElement.style.setProperty('--primary', color);
                
                // Save color preference
                localStorage.setItem('primaryColor', color);
                
                // Update active menu item color
                updateActiveMenuColor(color);
            });
        });
        
        // Function to update active menu item gradient
        function updateActiveMenuColor(color) {
            const style = document.createElement('style');
            style.innerHTML = `
                .menu-link.active {
                    background: linear-gradient(118deg, ${color}, ${color}dd);
                    box-shadow: 0 3px 12px 0 ${color}55;
                }
            `;
            document.head.appendChild(style);
        }

        // Color Picker functionality
        const colorPickerModal = document.getElementById('color-picker-modal');
        const colorPickerClose = document.getElementById('color-picker-close');
        const colorPickerCancel = document.getElementById('color-picker-cancel');
        const colorPickerApply = document.getElementById('color-picker-apply');
        const hexInput = document.getElementById('hex-input');
        
        colorPickerClose.addEventListener('click', () => {
            colorPickerModal.classList.remove('show');
            customizerOverlay.classList.remove('show');
        });
        
        colorPickerCancel.addEventListener('click', () => {
            colorPickerModal.classList.remove('show');
            customizerOverlay.classList.remove('show');
        });
        
        colorPickerApply.addEventListener('click', () => {
            const hexColor = hexInput.value;
            if (/^#[0-9A-F]{6}$/i.test(hexColor)) {
                document.documentElement.style.setProperty('--primary', hexColor);
                updateActiveMenuColor(hexColor);
                colorPickerModal.classList.remove('show');
                customizerOverlay.classList.remove('show');
                
                // Save custom color preference
                localStorage.setItem('primaryColor', hexColor);
                
                // Update custom color option to show as active
                document.querySelectorAll('.color-option').forEach(opt => opt.classList.remove('active'));
                document.querySelector('.color-option.custom').classList.add('active');
            }
        });
        
        // Simple color picker interaction (basic implementation)
        const colorGradient = document.getElementById('color-gradient');
        const colorIndicator = document.getElementById('color-picker-indicator');
        const hueSlider = document.getElementById('hue-slider');
        const hueIndicator = document.getElementById('hue-indicator');
        
        let currentHue = 340; // Default pink hue
        
        colorGradient.addEventListener('click', (e) => {
            const rect = colorGradient.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;
            
            colorIndicator.style.left = x + 'px';
            colorIndicator.style.top = y + 'px';
            
            updateColorFromPosition(x / rect.width, y / rect.height);
        });
        
        hueSlider.addEventListener('click', (e) => {
            const rect = hueSlider.getBoundingClientRect();
            const x = e.clientX - rect.left;
            
            hueIndicator.style.left = x + 'px';
            currentHue = (x / rect.width) * 360;
            
            updateColorGradient();
        });
        
        function updateColorFromPosition(x, y) {
            const saturation = x * 100;
            const lightness = (1 - y) * 50 + 25;
            const hex = hslToHex(currentHue, saturation, lightness);
            hexInput.value = hex;
        }
        
        function updateColorGradient() {
            colorGradient.style.background = `
                linear-gradient(to bottom, transparent, black), 
                linear-gradient(to right, white, hsl(${currentHue}, 100%, 50%))
            `;
        }
        
        function hslToHex(h, s, l) {
            l /= 100;
            const a = s * Math.min(l, 1 - l) / 100;
            const f = n => {
                const k = (n + h / 30) % 12;
                const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
                return Math.round(255 * color).toString(16).padStart(2, '0');
            };
            return `#${f(0)}${f(8)}${f(4)}`;
        }

        // Theme options
        document.querySelectorAll('.theme-option').forEach(option => {
            option.addEventListener('click', () => {
                document.querySelectorAll('.theme-option').forEach(opt => opt.classList.remove('active'));
                option.classList.add('active');
            });
        });

        // Layout options
        document.querySelectorAll('.layout-option').forEach(option => {
            option.addEventListener('click', () => {
                document.querySelectorAll('.layout-option').forEach(opt => opt.classList.remove('active'));
                option.classList.add('active');
            });
        });

        // Menu background color options
        document.querySelectorAll('.color-option.menu-bg').forEach(option => {
            option.addEventListener('click', () => {
                if (option.classList.contains('custom')) {
                    // Open custom menu color picker
                    document.getElementById('menu-color-picker-modal').classList.add('show');
                    customizerOverlay.classList.add('show');
                    return;
                }
                document.querySelectorAll('.color-option.menu-bg').forEach(opt => opt.classList.remove('active'));
                option.classList.add('active');
                const menuBg = option.getAttribute('data-menu-bg');
                document.querySelector('.layout-menu').style.background = menuBg;
                
                // Save menu background color preference
                localStorage.setItem('menuBgColor', menuBg);
            });
        });

        // Menu Color Picker functionality
        const menuColorPickerModal = document.getElementById('menu-color-picker-modal');
        const menuColorPickerClose = document.getElementById('menu-color-picker-close');
        const menuColorPickerCancel = document.getElementById('menu-color-picker-cancel');
        const menuColorPickerApply = document.getElementById('menu-color-picker-apply');
        const menuHexInput = document.getElementById('menu-hex-input');
        
        menuColorPickerClose.addEventListener('click', () => {
            menuColorPickerModal.classList.remove('show');
            customizerOverlay.classList.remove('show');
        });
        
        menuColorPickerCancel.addEventListener('click', () => {
            menuColorPickerModal.classList.remove('show');
            customizerOverlay.classList.remove('show');
        });
        
        menuColorPickerApply.addEventListener('click', () => {
            const hexColor = menuHexInput.value;
            if (/^#[0-9A-F]{6}$/i.test(hexColor)) {
                document.querySelector('.layout-menu').style.background = hexColor;
                menuColorPickerModal.classList.remove('show');
                customizerOverlay.classList.remove('show');
                
                // Save custom menu background color
                localStorage.setItem('menuBgColor', hexColor);
                
                // Update custom color option to show as active
                document.querySelectorAll('.color-option.menu-bg').forEach(opt => opt.classList.remove('active'));
                document.querySelector('#custom-menu-bg').classList.add('active');
            }
        });

        // Initialize first menu bg option as active
        document.querySelector('.color-option.menu-bg[data-menu-bg="#2b2c40"]').classList.add('active');

        // Language selector
        const languageToggle = document.getElementById('language-toggle');
        const languageDropdown = document.getElementById('language-dropdown');
        
        languageToggle.addEventListener('click', (e) => {
            e.stopPropagation();
            languageDropdown.classList.toggle('show');
        });
        
        document.addEventListener('click', () => {
            languageDropdown.classList.remove('show');
        });
        
        languageDropdown.addEventListener('click', (e) => {
            e.stopPropagation();
        });
        
        // Language change
        const translations = {
            es: {
                // Menu items
                'menu.empresa': 'Empresa',
                'menu.roles': 'Roles',
                'menu.rolesUsers': 'Roles & Usuarios',
                'menu.usuarios': 'Usuarios',
                'menu.clientes': 'Clientes',
                'menu.sitioWeb': 'Sitio Web',
                // Search
                'search.placeholder': 'Buscar (CTRL + K)',
                // Template Customizer
                'customizer.title': 'Personalizador de Plantilla',
                'customizer.theming': 'Tema',
                'customizer.primaryColor': 'Color Primario',
                'customizer.theme': 'Tema',
                'customizer.light': 'Claro',
                'customizer.dark': 'Oscuro',
                'customizer.system': 'Sistema',
                'customizer.layout': 'Diseño',
                'customizer.skins': 'Apariencias',
                'customizer.default': 'Por defecto',
                'customizer.bordered': 'Con bordes',
                'customizer.semiDark': 'Semi Oscuro',
                'customizer.menu': 'Menú (Navegación)',
                'customizer.menuBackground': 'Fondo del Menú',
                'customizer.menuCollapsed': 'Menú Colapsado',
                'customizer.menuHidden': 'Menú Oculto',
                'customizer.expanded': 'Expandido',
                'customizer.collapsed': 'Colapsado',
                'customizer.navbarType': 'Tipo de Barra de Navegación',
                'customizer.sticky': 'Pegajosa',
                'customizer.static': 'Estática',
                'customizer.hidden': 'Oculta',
                // Color picker
                'colorPicker.title': 'Seleccionar Color',
                'colorPicker.menuTitle': 'Seleccionar Color de Fondo del Menú',
                'colorPicker.cancel': 'Cancelar',
                'colorPicker.apply': 'Aplicar',
                // Company page
                'breadcrumb.home': 'Inicio',
                'breadcrumb.settings': 'Configuración',
                'breadcrumb.company': 'Empresa',
                'company.title': 'Personaliza tu Empresa',
                'company.businessName': 'Razón social',
                'company.businessNamePlaceholder': 'Ingrese la razón social',
                'company.rncOrId': 'RNC o Cédula',
                'company.tradeName': 'Nombre comercial',
                'company.tradeNamePlaceholder': 'Ingrese el nombre comercial',
                'company.email': 'Correo electrónico',
                'company.website': 'Sitio web',
                'company.phone': 'Teléfono',
                'company.electronicBilling': 'Facturación electrónica',
                'company.deactivated': 'Desactivado',
                'company.activate': 'Activar',
                'company.address': 'Dirección',
                'company.addressPlaceholder': 'Ingrese la dirección completa',
                'company.province': 'Provincia',
                'company.provincePlaceholder': 'Ingrese la provincia',
                'company.municipality': 'Municipio',
                'company.municipalityPlaceholder': 'Ingrese el municipio',
                'company.taxRegime': 'Régimen',
                'company.generalRegime': 'Régimen general',
                'company.simplifiedRegime': 'Régimen simplificado',
                'company.sector': 'Sector',
                'company.select': 'Seleccionar',
                'company.tourism': 'Turismo',
                'company.hospitality': 'Hotelería',
                'company.services': 'Servicios',
                'company.employeeCount': 'Número de empleados',
                'company.moreThan100': 'Más de 100',
                'company.currency': 'Moneda',
                'company.decimalPrecision': 'Precisión decimal',
                'company.decimalSeparator': 'Separador decimal',
                'company.timeZone': 'Zona horaria',
                'company.metric': 'Métrica',
                'company.metricSystem': 'Métrico',
                'company.imperialSystem': 'Imperial',
                'company.weight': 'Peso',
                'company.kilograms': 'Kilogramos',
                'company.pounds': 'Libras',
                'company.orderPrefix': 'Prefijo',
                'company.orderSuffix': 'Sufijo',
                'company.orderExample': 'Tu ID de orden aparecerá como #1001, #1002, #1003 ...',
                'buttons.cancel': 'Cancelar',
                'buttons.save': 'Guardar',
                'buttons.saveChanges': 'Guardar cambios',
                'buttons.export': 'Exportar',
                // Roles
                'roles.title': 'Lista de Roles',
                'roles.subtitle': 'Un rol proporciona acceso a menús y características predefinidos para que, dependiendo del rol asignado, un administrador pueda tener acceso a lo que el usuario necesita',
                'roles.totalUsers': 'Total {0} usuarios',
                'roles.editRole': 'Editar Rol',
                'roles.addNewRole': 'Agregar Nuevo Rol',
                'roles.addNewRoleDesc': 'Agrega un nuevo rol, si no existe.',
                'roles.totalUsersWithRoles': 'Total de usuarios con sus roles',
                'roles.findUsersDesc': 'Encuentra todos los usuarios de tu empresa y sus roles asociados.',
                'roles.searchUser': 'Buscar Usuario',
                'roles.addNewUser': 'Agregar Nuevo Usuario',
                'roles.roleName': 'Nombre del Rol',
                'roles.enterRoleName': 'Ingrese el nombre del rol',
                'roles.description': 'Descripción',
                'roles.enterDescription': 'Ingrese una descripción del rol',
                'roles.permissions': 'Permisos del Rol',
                'roles.setPermissionsDesc': 'Establecer permisos del rol',
                'roles.adminAccess': 'Acceso de Administrador',
                'roles.selectAll': 'Seleccionar Todo',
                'roles.status': 'Estado',
                'roles.active': 'Activo',
                // Table headers
                'table.user': 'USUARIO',
                'table.role': 'ROL',
                'table.plan': 'PLAN',
                'table.billing': 'FACTURACIÓN',
                'table.status': 'ESTADO',
                'table.actions': 'ACCIONES',
                // Pagination
                'pagination.showing': 'Mostrando',
                'pagination.to': 'a',
                'pagination.of': 'de',
                'pagination.entries': 'entradas',
                // Status
                'status.active': 'Activo',
                'status.pending': 'Pendiente',
                'status.inactive': 'Inactivo',
                // Modules (for permissions)
                'module.Empresa': 'Empresa',
                'module.Roles': 'Roles',
                'module.Usuarios': 'Usuarios',
                'module.Clientes': 'Clientes',
                'module.SitioWeb': 'Sitio Web',
                // Actions
                'action.Read': 'Leer',
                'action.Write': 'Escribir',
                'action.Create': 'Crear',
                'action.read': 'Leer',
                'action.write': 'Escribir',
                'action.create': 'Crear',
                // Users
                'users.addUser': 'Agregar Usuario',
                'users.editUser': 'Editar Usuario',
                'users.fullName': 'Nombre Completo',
                'users.userName': 'Nombre de Usuario',
                'users.email': 'Correo Electrónico',
                'users.role': 'Rol',
                'users.password': 'Contraseña',
                'users.confirmPassword': 'Confirmar Contraseña',
                'users.status': 'Estado',
                'users.profileImage': 'Imagen de Perfil',
                'users.uploadImage': 'Cargar Imagen'
            },
            en: {
                // Menu items
                'menu.empresa': 'Company',
                'menu.roles': 'Roles',
                'menu.rolesUsers': 'Roles & Users',
                'menu.usuarios': 'Users',
                'menu.clientes': 'Clients',
                'menu.sitioWeb': 'Website',
                // Search
                'search.placeholder': 'Search (CTRL + K)',
                // Template Customizer
                'customizer.title': 'Template Customizer',
                'customizer.theming': 'Theming',
                'customizer.primaryColor': 'Primary Color',
                'customizer.theme': 'Theme',
                'customizer.light': 'Light',
                'customizer.dark': 'Dark',
                'customizer.system': 'System',
                'customizer.layout': 'Layout',
                'customizer.skins': 'Skins',
                'customizer.default': 'Default',
                'customizer.bordered': 'Bordered',
                'customizer.semiDark': 'Semi Dark',
                'customizer.menu': 'Menu (Navigation)',
                'customizer.menuBackground': 'Menu Background',
                'customizer.menuCollapsed': 'Menu Collapsed',
                'customizer.menuHidden': 'Menu Hidden',
                'customizer.expanded': 'Expanded',
                'customizer.collapsed': 'Collapsed',
                'customizer.navbarType': 'Navbar Type',
                'customizer.sticky': 'Sticky',
                'customizer.static': 'Static',
                'customizer.hidden': 'Hidden',
                // Color picker
                'colorPicker.title': 'Pick a Color',
                'colorPicker.menuTitle': 'Pick Menu Background Color',
                'colorPicker.cancel': 'Cancel',
                'colorPicker.apply': 'Apply',
                // Company page
                'breadcrumb.home': 'Home',
                'breadcrumb.settings': 'Settings',
                'breadcrumb.company': 'Company',
                'company.title': 'Customize your Company',
                'company.businessName': 'Business Name',
                'company.businessNamePlaceholder': 'Enter business name',
                'company.rncOrId': 'RNC or ID',
                'company.tradeName': 'Trade Name',
                'company.tradeNamePlaceholder': 'Enter trade name',
                'company.email': 'Email',
                'company.website': 'Website',
                'company.phone': 'Phone',
                'company.electronicBilling': 'Electronic Billing',
                'company.deactivated': 'Deactivated',
                'company.activate': 'Activate',
                'company.address': 'Address',
                'company.addressPlaceholder': 'Enter full address',
                'company.province': 'Province',
                'company.provincePlaceholder': 'Enter province',
                'company.municipality': 'Municipality',
                'company.municipalityPlaceholder': 'Enter municipality',
                'company.taxRegime': 'Tax Regime',
                'company.generalRegime': 'General regime',
                'company.simplifiedRegime': 'Simplified regime',
                'company.sector': 'Sector',
                'company.select': 'Select',
                'company.tourism': 'Tourism',
                'company.hospitality': 'Hospitality',
                'company.services': 'Services',
                'company.employeeCount': 'Number of employees',
                'company.moreThan100': 'More than 100',
                'company.currency': 'Currency',
                'company.decimalPrecision': 'Decimal precision',
                'company.decimalSeparator': 'Decimal separator',
                'company.timeZone': 'Time Zone',
                'company.metric': 'Metric',
                'company.metricSystem': 'Metric',
                'company.imperialSystem': 'Imperial',
                'company.weight': 'Weight',
                'company.kilograms': 'Kilograms',
                'company.pounds': 'Pounds',
                'company.orderPrefix': 'Prefix',
                'company.orderSuffix': 'Suffix',
                'company.orderExample': 'Your order ID will appear as #1001, #1002, #1003 ...',
                'buttons.cancel': 'Cancel',
                'buttons.save': 'Save',
                'buttons.saveChanges': 'Save changes',
                'buttons.export': 'Export',
                // Roles
                'roles.title': 'Roles List',
                'roles.subtitle': 'A role provides access to predefined menus and features so that depending on the assigned role, an administrator can have access to what the user needs',
                'roles.totalUsers': 'Total {0} users',
                'roles.editRole': 'Edit Role',
                'roles.addNewRole': 'Add New Role',
                'roles.addNewRoleDesc': 'Add a new role, if it does not exist.',
                'roles.totalUsersWithRoles': 'Total users with their roles',
                'roles.findUsersDesc': 'Find all users in your company and their associated roles.',
                'roles.searchUser': 'Search User',
                'roles.addNewUser': 'Add New User',
                'roles.roleName': 'Role Name',
                'roles.enterRoleName': 'Enter role name',
                'roles.description': 'Description',
                'roles.enterDescription': 'Enter role description',
                'roles.permissions': 'Role Permissions',
                'roles.setPermissionsDesc': 'Set role permissions',
                'roles.adminAccess': 'Administrator Access',
                'roles.selectAll': 'Select All',
                'roles.status': 'Status',
                'roles.active': 'Active',
                // Table headers
                'table.user': 'USER',
                'table.role': 'ROLE',
                'table.plan': 'PLAN',
                'table.billing': 'BILLING',
                'table.status': 'STATUS',
                'table.actions': 'ACTIONS',
                // Pagination
                'pagination.showing': 'Showing',
                'pagination.to': 'to',
                'pagination.of': 'of',
                'pagination.entries': 'entries',
                // Status
                'status.active': 'Active',
                'status.pending': 'Pending',
                'status.inactive': 'Inactive',
                // Modules (for permissions)
                'module.Empresa': 'Company',
                'module.Roles': 'Roles',
                'module.Usuarios': 'Users',
                'module.Clientes': 'Clients',
                'module.SitioWeb': 'Website',
                // Actions
                'action.Read': 'Read',
                'action.Write': 'Write',
                'action.Create': 'Create',
                'action.read': 'Read',
                'action.write': 'Write',
                'action.create': 'Create',
                // Users
                'users.addUser': 'Add User',
                'users.editUser': 'Edit User',
                'users.fullName': 'Full Name',
                'users.userName': 'Username',
                'users.email': 'Email',
                'users.role': 'Role',
                'users.password': 'Password',
                'users.confirmPassword': 'Confirm Password',
                'users.status': 'Status',
                'users.profileImage': 'Profile Image',
                'users.uploadImage': 'Upload Image'
            }
        };
        
        let currentLang = 'es';
        
        function translatePage(lang) {
            currentLang = lang;
            const t = translations[lang];
            
            // Update menu items
            document.querySelectorAll('[data-i18n]').forEach(element => {
                const key = element.getAttribute('data-i18n');
                if (t[key]) {
                    element.textContent = t[key];
                }
            });
            
            // Update placeholders
            document.querySelectorAll('[data-i18n-placeholder]').forEach(element => {
                const key = element.getAttribute('data-i18n-placeholder');
                if (t[key]) {
                    element.placeholder = t[key];
                }
            });
            
            // Store language preference
            localStorage.setItem('preferredLanguage', lang);
            
            // Dispatch custom event for language change
            document.dispatchEvent(new CustomEvent('languageChanged', { detail: { language: lang } }));
        }
        
        document.querySelectorAll('.language-option').forEach(option => {
            option.addEventListener('click', (e) => {
                e.preventDefault();
                document.querySelectorAll('.language-option').forEach(opt => opt.classList.remove('active'));
                option.classList.add('active');
                const lang = option.getAttribute('data-lang');
                translatePage(lang);
                languageDropdown.classList.remove('show');
            });
        });
        
        // Load saved language preference
        const savedLang = localStorage.getItem('preferredLanguage') || 'es';
        if (savedLang !== 'es') {
            document.querySelector(`.language-option[data-lang="${savedLang}"]`).click();
        }

        // Menu collapse toggle
        const menuToggleBtn = document.getElementById('menu-toggle-btn');
        const layoutContainer = document.querySelector('.layout-container');
        
        if (menuToggleBtn) {
            menuToggleBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                console.log('Toggle button clicked');
                layoutContainer.classList.toggle('menu-collapsed');
                const isCollapsed = layoutContainer.classList.contains('menu-collapsed');
                localStorage.setItem('menuCollapsed', isCollapsed);
                updateMenuLayoutOption();
            });
        }
        
        // Load saved menu state
        const savedMenuState = localStorage.getItem('menuCollapsed') === 'true';
        if (savedMenuState) {
            layoutContainer.classList.add('menu-collapsed');
        }

        // Dark mode toggle
        const themeToggle = document.getElementById('theme-toggle');
        const body = document.body;
        
        themeToggle.addEventListener('click', () => {
            body.classList.toggle('dark-mode');
            const isDark = body.classList.contains('dark-mode');
            localStorage.setItem('darkMode', isDark);
            
            // Update icon
            const icon = themeToggle.querySelector('i');
            icon.classList.toggle('fa-moon');
            icon.classList.toggle('fa-sun');
        });
        
        // Load saved theme
        const savedTheme = localStorage.getItem('darkMode') === 'true';
        if (savedTheme) {
            body.classList.add('dark-mode');
            themeToggle.querySelector('i').classList.remove('fa-moon');
            themeToggle.querySelector('i').classList.add('fa-sun');
        }

        // Update theme option in customizer based on dark mode
        function updateThemeOption() {
            const isDark = body.classList.contains('dark-mode');
            document.querySelectorAll('.theme-option').forEach(opt => opt.classList.remove('active'));
            if (isDark) {
                document.querySelector('.theme-option[data-theme="dark"]').classList.add('active');
            } else {
                document.querySelector('.theme-option[data-theme="light"]').classList.add('active');
            }
        }

        // Connect theme options to dark mode
        document.querySelectorAll('.theme-option').forEach(option => {
            option.addEventListener('click', () => {
                const theme = option.getAttribute('data-theme');
                if (theme === 'dark') {
                    body.classList.add('dark-mode');
                    themeToggle.querySelector('i').classList.remove('fa-moon');
                    themeToggle.querySelector('i').classList.add('fa-sun');
                    localStorage.setItem('darkMode', 'true');
                } else if (theme === 'light') {
                    body.classList.remove('dark-mode');
                    themeToggle.querySelector('i').classList.remove('fa-sun');
                    themeToggle.querySelector('i').classList.add('fa-moon');
                    localStorage.setItem('darkMode', 'false');
                }
            });
        });

        updateThemeOption();

        // Menu layout options
        document.querySelectorAll('.menu-layout').forEach(option => {
            option.addEventListener('click', () => {
                document.querySelectorAll('.menu-layout').forEach(opt => opt.classList.remove('active'));
                option.classList.add('active');
                const layout = option.getAttribute('data-menu-layout');
                
                if (layout === 'collapsed') {
                    layoutContainer.classList.add('menu-collapsed');
                    localStorage.setItem('menuCollapsed', 'true');
                } else {
                    layoutContainer.classList.remove('menu-collapsed');
                    localStorage.setItem('menuCollapsed', 'false');
                }
            });
        });

        // Update menu layout option based on current state
        function updateMenuLayoutOption() {
            const isCollapsed = layoutContainer.classList.contains('menu-collapsed');
            document.querySelectorAll('.menu-layout').forEach(opt => opt.classList.remove('active'));
            if (isCollapsed) {
                document.querySelector('.menu-layout[data-menu-layout="collapsed"]').classList.add('active');
            } else {
                document.querySelector('.menu-layout[data-menu-layout="expanded"]').classList.add('active');
            }
        }
        updateMenuLayoutOption();

        // Load saved color preference
        const savedColor = localStorage.getItem('primaryColor');
        if (savedColor) {
            document.documentElement.style.setProperty('--primary', savedColor);
            updateActiveMenuColor(savedColor);
            
            // Find and activate the corresponding color option
            let colorFound = false;
            document.querySelectorAll('.color-option:not(.custom)').forEach(opt => {
                if (opt.getAttribute('data-color') === savedColor) {
                    opt.classList.add('active');
                    colorFound = true;
                }
            });
            
            // If it's a custom color, activate the custom option
            if (!colorFound) {
                document.querySelector('.color-option.custom').classList.add('active');
            }
        }

        // Load saved menu background color
        const savedMenuBg = localStorage.getItem('menuBgColor');
        if (savedMenuBg) {
            document.querySelector('.layout-menu').style.background = savedMenuBg;
            
            // Find and activate the corresponding menu bg option
            let menuBgFound = false;
            document.querySelectorAll('.color-option.menu-bg:not(.custom)').forEach(opt => {
                if (opt.getAttribute('data-menu-bg') === savedMenuBg) {
                    opt.classList.add('active');
                    menuBgFound = true;
                }
            });
            
            // If it's a custom color, activate the custom option
            if (!menuBgFound) {
                document.querySelector('#custom-menu-bg').classList.add('active');
            }
        }

        // Navbar type options
        document.querySelectorAll('.navbar-type').forEach(option => {
            option.addEventListener('click', () => {
                document.querySelectorAll('.navbar-type').forEach(opt => opt.classList.remove('active'));
                option.classList.add('active');
                const type = option.getAttribute('data-navbar-type');
                
                const navbar = document.querySelector('.layout-navbar');
                navbar.classList.remove('navbar-static', 'navbar-hidden');
                
                if (type === 'static') {
                    navbar.classList.add('navbar-static');
                } else if (type === 'hidden') {
                    navbar.classList.add('navbar-hidden');
                }
                
                localStorage.setItem('navbarType', type);
            });
        });

        // Load saved navbar type
        const savedNavbarType = localStorage.getItem('navbarType') || 'sticky';
        if (savedNavbarType !== 'sticky') {
            document.querySelector(`.navbar-type[data-navbar-type="${savedNavbarType}"]`).click();
        }
        
        
        // Nuevo código para el avatar dropdown
        const avatarTrigger = document.getElementById('avatarTrigger');
        const avatarMenu = document.getElementById('avatarMenu');
        let isAvatarMenuOpen = false;
        
        // Toggle del menú al hacer click en el avatar
        avatarTrigger.addEventListener('click', function(e) {
            e.stopPropagation();
            isAvatarMenuOpen = !isAvatarMenuOpen;
            
            if (isAvatarMenuOpen) {
                avatarMenu.style.display = 'block';
                setTimeout(() => {
                    avatarMenu.classList.add('show');
                }, 10);
            } else {
                avatarMenu.classList.remove('show');
                setTimeout(() => {
                    avatarMenu.style.display = 'none';
                }, 200);
            }
        });
        
        // Cerrar el menú al hacer click fuera
        document.addEventListener('click', function(e) {
            if (!avatarTrigger.contains(e.target) && !avatarMenu.contains(e.target)) {
                if (isAvatarMenuOpen) {
                    isAvatarMenuOpen = false;
                    avatarMenu.classList.remove('show');
                    setTimeout(() => {
                        avatarMenu.style.display = 'none';
                    }, 200);
                }
            }
        });
        
        // Prevenir que el menú se cierre al hacer click dentro
        avatarMenu.addEventListener('click', function(e) {
            e.stopPropagation();
        });
    </script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>